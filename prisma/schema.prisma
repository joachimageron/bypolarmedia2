datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  description    String?
  image          String?
  bgImage        String?
  accounts       Account[] // Optional for WebAuthn support
  authenticators Authenticator[]

  // Relations
  posts         Post[]
  comments      Comment[]
  likes         Like[]
  notifications Notification[]
  followers     Follower[]     @relation("UserFollowers")
  following     Follower[]     @relation("UserFollowing")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id        String   @id @default(cuid())
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User          @relation(fields: [authorId], references: [id])
  comments Comment[]
  likes    Like[]
  media    Media[]
  hashtags PostHashtag[]

  // Ajoutez d'autres champs comme 'title' si n√©cessaire
}

model Comment {
  id        String   @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id])
  author User   @relation(fields: [authorId], references: [id])
  likes  Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())

  user    User     @relation(fields: [userId], references: [id])
  post    Post?    @relation(fields: [postId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())

  follower  User @relation("UserFollowers", fields: [followerId], references: [id])
  following User @relation("UserFollowing", fields: [followingId], references: [id])

  @@unique([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Media {
  id        String   @id @default(cuid())
  postId    String
  url       String
  type      String // Exemple : "image", "video"
  createdAt DateTime @default(now())

  post Post @relation(fields: [postId], references: [id])
}

model Hashtag {
  id   String @id @default(cuid())
  name String @unique

  posts PostHashtag[]
}

model PostHashtag {
  postId    String
  hashtagId String

  post    Post    @relation(fields: [postId], references: [id])
  hashtag Hashtag @relation(fields: [hashtagId], references: [id])

  @@id([postId, hashtagId])
}
