generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  password       String?
  image          String?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  description    String?
  bgImage        String?
  accounts       Account[]
  authenticators Authenticator[]
  comments       Comment[]
  dislikes       Dislike[]
  following      Follower[]      @relation("UserFollowing")
  followers      Follower[]      @relation("UserFollowers")
  likes          Like[]
  notifications  Notification[]
  posts          Post[]
}

model Account {
  id                String   @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Post {
  id        String        @id @default(cuid())
  authorId  String
  content   String?
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  comments  Comment[]
  dislikes  Dislike[]
  likes     Like[]
  media     Media[]
  author    User          @relation(fields: [authorId], references: [id])
  hashtags  PostHashtag[]
}

model Comment {
  id        String    @id @default(cuid())
  postId    String
  authorId  String
  content   String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  author    User      @relation(fields: [authorId], references: [id])
  post      Post      @relation(fields: [postId], references: [id])
  dislikes  Dislike[]
  likes     Like[]
}

model Like {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Dislike {
  id        String   @id @default(cuid())
  userId    String
  postId    String?
  commentId String?
  createdAt DateTime @default(now())
  comment   Comment? @relation(fields: [commentId], references: [id])
  post      Post?    @relation(fields: [postId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model Follower {
  id          String   @id @default(cuid())
  followerId  String
  followingId String
  createdAt   DateTime @default(now())
  following   User     @relation("UserFollowing", fields: [followingId], references: [id])
  follower    User     @relation("UserFollowers", fields: [followerId], references: [id])

  @@unique([followerId, followingId])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  content   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])
}

model Media {
  id        String   @id @default(cuid())
  postId    String
  url       String
  type      String
  createdAt DateTime @default(now())
  post      Post     @relation(fields: [postId], references: [id])
}

model Hashtag {
  id    String        @id @default(cuid())
  name  String        @unique
  posts PostHashtag[]
}

model PostHashtag {
  postId    String
  hashtagId String
  hashtag   Hashtag @relation(fields: [hashtagId], references: [id])
  post      Post    @relation(fields: [postId], references: [id])

  @@id([postId, hashtagId])
}
